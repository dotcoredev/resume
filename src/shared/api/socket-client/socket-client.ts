import { Manager, Socket, type ManagerOptions } from "socket.io-client";
import { SOCKET_CONFIG, SOCKET_EVENTS } from "../../config/socket.config";
import type {
	ISocketClient,
	SocketEventCallback,
} from "./interfaces/socket-client.interface";

class SocketClient implements ISocketClient {
	private socket: Socket | null = null;
	private manager: Manager | null = null;
	private rooms: Set<string> = new Set();
	private eventsQueue: Map<string, SocketEventCallback> = new Map();

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
	connect(namespace: string): Promise<void> {
		return new Promise((resolve, reject) => {
			try {
				this.manager = new Manager(
					SOCKET_CONFIG.url,
					SOCKET_CONFIG.options as Partial<ManagerOptions>
				); // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL –∏ –æ–ø—Ü–∏—è–º–∏
				this.socket = this.manager.socket(namespace); // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
				this.socket.removeAllListeners(); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
				this.socket.connect(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

				this.eventsQueue.forEach((callback, event) => {
					this.on(event, callback); // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
				});
				this.eventsQueue.clear(); // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏

				this.socket.on(SOCKET_EVENTS.CONNECT, () => {
					console.log("‚úÖ Connected to WebSocket server");
					this.joiningRooms();
					resolve();
				});

				// –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
				const handleConnectionFailure = (reason: string | Error) => {
					console.log("‚ùå Connection failed:", reason);
				};

				this.socket.on(
					SOCKET_EVENTS.DISCONNECT,
					handleConnectionFailure
				);
				this.socket.on(
					SOCKET_EVENTS.CONNECT_ERROR,
					handleConnectionFailure
				);
			} catch (error) {
				reject(error);
			}
		});
	}

	// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	disconnect(): void {
		if (this.socket) {
			this.socket.disconnect();
			this.socket = null;
			console.log("üîå Manually disconnected from WebSocket server");
		}
	}

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
	on(event: string, callback: SocketEventCallback): void {
		if (this.socket) {
			this.socket.on(event, callback);
		} else {
			this.eventsQueue.set(event, callback); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
		}
	}

	// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
	off(event: string, callback?: SocketEventCallback): void {
		if (this.socket) {
			this.socket.off(event, callback);
		} else {
			this.eventsQueue.clear(); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	emit(event: string, data?: any): void {
		if (this.socket && this.socket.connected) {
			this.socket.emit(event, data);
		} else {
			console.warn("‚ö†Ô∏è Socket not connected. Cannot emit event:", event);
		}
	}

	// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
	joinRoom(room: string): void {
		if (room.trim() === "") {
			console.warn("‚ö†Ô∏è Room name cannot be empty");
			return;
		}
		this.rooms.add(room);
		this.joiningRooms();
	}

	joiningRooms(): void {
		if (this.rooms.size === 0) return;
		this.rooms.forEach((room) => {
			console.log(`Joining room: ${room}`);
			this.emit(SOCKET_EVENTS.JOIN_TODO_ROOM, { room });
		});
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	get connected(): boolean {
		return this.socket?.connected ?? false;
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–ª–∏–µ–Ω—Ç–∞
	get clientId(): string | undefined {
		return this.socket?.id;
	}

	get getSocket(): Socket | null {
		return this.socket;
	}
}

// Singleton instance
export const socketClient = new SocketClient();
